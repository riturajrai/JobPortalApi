const JobApplication = require('../user/Jobapplications'); // ‚úÖ Ensure correct path
const mongoose = require('mongoose');
const jwt = require('jsonwebtoken'); // ‚úÖ Make sure JWT is imported

// ‚úÖ Apply for a Job
const applyForJob = async (req, res) => {
    try {
        console.log("üì• Received Request Body:", req.body); // ‚úÖ Check Incoming Request

        const { jobId, jobTitle, companyName, userId } = req.body; // ‚úÖ Extract userId from body

        if (!userId || !jobId || !jobTitle || !companyName) {
            return res.status(400).json({ message: "‚ö†Ô∏è Missing required fields!" });
        }

        // ‚úÖ Check if the user has already applied
        const alreadyApplied = await JobApplication.findOne({ userId, jobId });
        if (alreadyApplied) {
            return res.status(400).json({ message: "‚ö†Ô∏è You have already applied for this job!" });
        }

        // ‚úÖ Save the new application
        const newApplication = new JobApplication({
            userId,
            jobId,
            jobTitle,
            companyName,
            appliedAt: new Date()
        });

        await newApplication.save();
        res.status(201).json({ message: "‚úÖ Successfully applied for the job!" });

    } catch (error) {
        console.error("‚ùå Apply Job Error:", error);
        res.status(500).json({ message: "Error applying for the job.", error: error.message });
    }
};

// ‚úÖ Delete Applied Job
const deleteAppliedJob = async (req, res) => {
    try {
        const appliedJobId = req.params.id; // ‚úÖ Applied Job ID
        const token = req.headers.authorization?.split(" ")[1];

        if (!token) {
            return res.status(401).json({ error: "‚ö†Ô∏è Unauthorized: Missing token" });
        }

        // ‚úÖ Decode token using JWT
        const decodedToken = jwt.verify(token, process.env.JWT_SECRET);
        const userId = decodedToken.userId;

        // ‚úÖ Find the applied job
        const appliedJob = await JobApplication.findById(appliedJobId);
        if (!appliedJob) {
            return res.status(404).json({ error: "‚ùå Applied job not found!" });
        }

        // ‚úÖ Check if the job was applied by the logged-in user
        if (appliedJob.userId.toString() !== userId) {
            return res.status(403).json({ error: "‚õî Access denied: You can only delete your own applied jobs" });
        }

        // ‚úÖ Delete the applied job
        await JobApplication.findByIdAndDelete(appliedJobId);

        res.status(200).json({ message: "‚úÖ Applied job deleted successfully!" });
    } catch (error) {
        console.error("üö® Error deleting applied job:", error.message);
        res.status(500).json({ error: "‚ö†Ô∏è Internal Server Error!" });
    }
};

// ‚úÖ Get Applied Jobs for a User
const getAppliedJobs = async (req, res) => {
    try {
        const userId = req.params.userId || req.body.userId; // ‚úÖ Get userId from params or body
        console.log("üë§ Fetching Applied Jobs for User ID:", userId);

        if (!userId) {
            return res.status(400).json({ error: "‚õî Missing user ID!" });
        }

        // ‚úÖ Fetch user's applied jobs
        const appliedJobs = await JobApplication.find({ userId });

        if (!appliedJobs.length) {
            return res.status(404).json({ message: "üîç No applied jobs found." });
        }

        return res.status(200).json(appliedJobs);
    } catch (error) {
        console.error("‚ùå Error fetching applied jobs:", error);
        res.status(500).json({ error: "‚ö†Ô∏è Server error" });
    }
};

// ‚úÖ GET Applied Job by ID
const getAppliedJobById = async (req, res) => {
    try {
        const { id } = req.params;
        console.log("üîç Fetching applied job with ID:", id);

        const job = await JobApplication.findById(id);
        if (!job) {
            return res.status(404).json({ message: "‚ùå Applied job not found!" });
        }

        res.status(200).json(job);
    } catch (error) {
        console.error("‚ùå Error fetching applied job:", error);
        res.status(500).json({ message: "‚ùå Server error fetching applied job.", error: error.message });
    }
};

module.exports = {
    applyForJob,
    getAppliedJobs,
    getAppliedJobById, // ‚úÖ Added missing export
    deleteAppliedJob
};
